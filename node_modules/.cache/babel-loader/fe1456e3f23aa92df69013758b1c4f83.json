{"remainingRequest":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\fetch.js","dependencies":[{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\fetch.js","mtime":1581925828387},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581926356531},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import dataConfig from '../../data/config/COVID.json';\nimport basedata from '../../data/geography.geojson.json';\nimport jenksBreaks from './jenksbreaks';\nimport dataSummary from './datasummary';\nexport default function fetchData(appState, metric) {\n  appState.metricId = metric; // fetch data\n\n  fetch(\"../../data/geography.geojson.json\").then(function (response) {\n    return response;\n  }).then(function (data) {\n    /* let nKeys = Object.keys(data.features);\r\n    let yKeys = Object.keys(data.features[nKeys[0]]);\r\n    let years = yKeys.features(function(el) {\r\n      return el.replace('y_', '');\r\n    });\r\n      // drop invalid selected values\r\n    for (let i = 0; i < appState.selected.length; i++) {\r\n      if (nKeys.indexOf(appState.selected[i]) === -1) {\r\n        let pos = appState.selected.indexOf(appState.selected[i]);\r\n        appState.selected.splice(pos, 1);\r\n      }\r\n    } */\n    appState.metric = {\n      config: dataConfig,\n      years: 2020,\n      data: basedata\n    }; // replace year if previous year doesn't exist in data\n\n    /* if (years.indexOf(appState.year) === -1) {\r\n      appState.year = years[years.length - 1];\r\n    }\r\n    appState.breaks = jenksBreaks(data.map, years, nKeys, 5);\r\n      // send back summary data\r\n    if (window != window.top) {\r\n      parent.postMessage(\r\n        {\r\n          summary: dataSummary(appState)\r\n        },\r\n        '*'\r\n      );\r\n    } */\n  }).catch(function (ex) {\n    console.log('parsing failed', ex);\n  }); // fetch metadata\n\n  /*   fetch(`./data/meta/m${metric}.html`)\r\n      .then(function(response) {\r\n        return response.text();\r\n      })\r\n      .then(function(data) {\r\n        appState.metadata = data;\r\n      })\r\n      .catch(function(ex) {\r\n        console.log('parsing failed', ex);\r\n      }); */\n}",{"version":3,"sources":["src\\js\\fetch.js"],"names":["dataConfig","basedata","jenksBreaks","dataSummary","fetchData","appState","metric","metricId","fetch","then","response","data","config","years","catch","ex","console","log"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,MAA7B,EAAqC;AAClDD,WAASE,QAAT,GAAoBD,MAApB,CADkD,CAKlD;;AACCE,6CACEC,IADF,CACO,UAASC,QAAT,EAAmB;AACvB,WAAOA,QAAP;AACD,GAHF,EAIED,IAJF,CAIO,UAASE,IAAT,EAAe;AACnB;;;;;;;;;;;;AAcCN,aAASC,MAAT,GAAkB;AACjBM,cAAQZ,UADS;AAEjBa,aAAO,IAFU;AAGjBF,YAAMV;AAHW,KAAlB,CAfkB,CAqBnB;;AACA;;;;;;;;;;;;;AAcA,GAxCH,EAyCEa,KAzCF,CAyCQ,UAASC,EAAT,EAAa;AAClBC,YAAQC,GAAR,CAAY,gBAAZ,EAA8BF,EAA9B;AACD,GA3CF,EANiD,CAmDlD;;AACF;;;;;;;;;;AAUC","sourceRoot":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019","sourcesContent":["import dataConfig from '../../data/config/COVID.json';\r\nimport basedata from '../../data/geography.geojson.json';\r\nimport jenksBreaks from './jenksbreaks';\r\nimport dataSummary from './datasummary';\r\n\r\nexport default function fetchData(appState, metric) {\r\n  appState.metricId = metric;\r\n\r\n\r\n\t  \r\n  // fetch data\r\n   fetch(`../../data/geography.geojson.json`)\r\n    .then(function(response) {\r\n      return response;\r\n    })\r\n    .then(function(data) { \r\n      /* let nKeys = Object.keys(data.features);\r\n      let yKeys = Object.keys(data.features[nKeys[0]]);\r\n      let years = yKeys.features(function(el) {\r\n        return el.replace('y_', '');\r\n      });\r\n\r\n      // drop invalid selected values\r\n      for (let i = 0; i < appState.selected.length; i++) {\r\n        if (nKeys.indexOf(appState.selected[i]) === -1) {\r\n          let pos = appState.selected.indexOf(appState.selected[i]);\r\n          appState.selected.splice(pos, 1);\r\n        }\r\n      } */\r\n\r\n       appState.metric = {\r\n        config: dataConfig,\r\n        years: 2020,\r\n        data: basedata\r\n      };\r\n\r\n      // replace year if previous year doesn't exist in data\r\n      /* if (years.indexOf(appState.year) === -1) {\r\n        appState.year = years[years.length - 1];\r\n      }\r\n      appState.breaks = jenksBreaks(data.map, years, nKeys, 5);\r\n\r\n      // send back summary data\r\n      if (window != window.top) {\r\n        parent.postMessage(\r\n          {\r\n            summary: dataSummary(appState)\r\n          },\r\n          '*'\r\n        );\r\n      } */\r\n     })\r\n    .catch(function(ex) {\r\n      console.log('parsing failed', ex);\r\n    }); \r\n\r\n  // fetch metadata\r\n/*   fetch(`./data/meta/m${metric}.html`)\r\n    .then(function(response) {\r\n      return response.text();\r\n    })\r\n    .then(function(data) {\r\n      appState.metadata = data;\r\n    })\r\n    .catch(function(ex) {\r\n      console.log('parsing failed', ex);\r\n    }); */\r\n}"]}]}