{"remainingRequest":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\geojsondatamerge.js","dependencies":[{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\geojsondatamerge.js","mtime":1581925828388},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581926356531},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581926357833},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport isNumeric from './isnumeric';\nimport { valsToArray } from './metric_calculations';\n\nfunction geojsonDataMerge(g, d, y) {\n  // get array max\n  let valsArray = valsToArray(d, [y], Object.keys(d));\n  let heightFactor = 5000 / Math.max.apply(Math, valsArray);\n\n  for (let i = 0; i < g.features.length; i++) {\n    if (isNumeric(d[g.features[i].properties.id][`y_${y}`])) {\n      g.features[i].properties.choropleth = d[g.features[i].properties.id][`y_${y}`];\n      g.features[i].properties.height = d[g.features[i].properties.id][`y_${y}`] * heightFactor;\n    } else {\n      g.features[i].properties.choropleth = 'null';\n      g.features[i].properties.height = 'null';\n    }\n  }\n\n  return g;\n}\n\nexport default geojsonDataMerge;",{"version":3,"sources":["src\\js\\geojsondatamerge.js"],"names":["isNumeric","valsToArray","geojsonDataMerge","g","d","y","valsArray","Object","keys","heightFactor","Math","max","apply","i","features","length","properties","id","choropleth","height"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,uBAA1B;;AAEA,SAASC,gBAAT,CAA0BC,CAA1B,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmC;AAC/B;AACA,MAAIC,YAAYL,YAAYG,CAAZ,EAAe,CAACC,CAAD,CAAf,EAAoBE,OAAOC,IAAP,CAAYJ,CAAZ,CAApB,CAAhB;AACA,MAAIK,eAAe,OAAOC,KAAKC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBJ,SAArB,CAA1B;;AAEA,OAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIV,EAAEW,QAAF,CAAWC,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC,QAAIb,UAAUI,EAAED,EAAEW,QAAF,CAAWD,CAAX,EAAcG,UAAd,CAAyBC,EAA3B,EAAgC,KAAIZ,CAAE,EAAtC,CAAV,CAAJ,EAAyD;AACrDF,QAAEW,QAAF,CAAWD,CAAX,EAAcG,UAAd,CAAyBE,UAAzB,GAAsCd,EAAED,EAAEW,QAAF,CAAWD,CAAX,EAAcG,UAAd,CAAyBC,EAA3B,EAAgC,KAAIZ,CAAE,EAAtC,CAAtC;AACAF,QAAEW,QAAF,CAAWD,CAAX,EAAcG,UAAd,CAAyBG,MAAzB,GAAkCf,EAAED,EAAEW,QAAF,CAAWD,CAAX,EAAcG,UAAd,CAAyBC,EAA3B,EAAgC,KAAIZ,CAAE,EAAtC,IAA2CI,YAA7E;AACH,KAHD,MAGQ;AACJN,QAAEW,QAAF,CAAWD,CAAX,EAAcG,UAAd,CAAyBE,UAAzB,GAAsC,MAAtC;AACAf,QAAEW,QAAF,CAAWD,CAAX,EAAcG,UAAd,CAAyBG,MAAzB,GAAkC,MAAlC;AACH;AACJ;;AACD,SAAOhB,CAAP;AACH;;AAED,eAAeD,gBAAf","sourceRoot":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019","sourcesContent":["import isNumeric from './isnumeric';\r\nimport {valsToArray} from './metric_calculations';\r\n\r\nfunction geojsonDataMerge(g, d, y) {\r\n    // get array max\r\n    let valsArray = valsToArray(d, [y], Object.keys(d));\r\n    let heightFactor = 5000 / Math.max.apply(Math, valsArray);\r\n\r\n    for (let i = 0; i < g.features.length; i++) {\r\n        if (isNumeric(d[g.features[i].properties.id][`y_${y}`])) {\r\n            g.features[i].properties.choropleth = d[g.features[i].properties.id][`y_${y}`];\r\n            g.features[i].properties.height = d[g.features[i].properties.id][`y_${y}`] * heightFactor;\r\n        } else  {\r\n            g.features[i].properties.choropleth = 'null';\r\n            g.features[i].properties.height = 'null';\r\n        }\r\n    }\r\n    return g;\r\n}\r\n\r\nexport default geojsonDataMerge;\r\n"]}]}