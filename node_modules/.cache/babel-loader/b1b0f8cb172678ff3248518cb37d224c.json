{"remainingRequest":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\number_format.js","dependencies":[{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\number_format.js","mtime":1581925828395},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581926356531},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport isNumeric from './isnumeric';\n\nfunction abbrNum(number, decPlaces) {\n  // 2 decimal places => 100, 3 => 1000, etc\n  decPlaces = Math.pow(10, decPlaces); // Enumerate number abbreviations\n\n  var abbrev = [\"k\", \"m\", \"b\", \"t\"]; // Go through the array backwards, so we do the largest first\n\n  for (var i = abbrev.length - 1; i >= 0; i--) {\n    // Convert array index to \"1000\", \"1000000\", etc\n    var size = Math.pow(10, (i + 1) * 3); // If the number is bigger or equal do the abbreviation\n\n    if (size <= number) {\n      // Here, we multiply by decPlaces, round, and then divide by decPlaces.\n      // This gives us nice rounding to a particular decimal place.\n      number = Math.round(number * decPlaces / size) / decPlaces; // Handle special case where we round up to the next abbreviation\n\n      if (number == 1000 && i < abbrev.length - 1) {\n        number = 1;\n        i++;\n      } // Add the letter for the abbreviation\n\n\n      number += abbrev[i]; // We are done... stop\n\n      break;\n    }\n  }\n\n  return number;\n}\n\nfunction round(number) {\n  var decPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Number(number.toFixed(decPlaces));\n}\n\nfunction commafy(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction numberfixes(number) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return prefix + number + suffix;\n}\n\nfunction prettyNumber(number) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n  if (isNumeric(number)) {\n    return numberfixes(commafy(round(number, decimals)), prefix, suffix);\n  } else {\n    return '--';\n  }\n}\n\nexport { abbrNum, round, numberfixes, commafy, prettyNumber };",{"version":3,"sources":["src\\js\\number_format.js"],"names":["isNumeric","abbrNum","number","decPlaces","Math","pow","abbrev","i","length","size","round","Number","toFixed","commafy","toString","replace","numberfixes","prefix","suffix","prettyNumber","decimals"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,SAAzB,EAAoC;AAChC;AACAA,cAAYC,KAAKC,GAAL,CAAS,EAAT,EAAaF,SAAb,CAAZ,CAFgC,CAGhC;;AACA,MAAIG,SAAS,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,CAAb,CAJgC,CAKhC;;AACA,OAAK,IAAIC,IAAED,OAAOE,MAAP,GAAc,CAAzB,EAA4BD,KAAG,CAA/B,EAAkCA,GAAlC,EAAuC;AACnC;AACA,QAAIE,OAAOL,KAAKC,GAAL,CAAS,EAAT,EAAY,CAACE,IAAE,CAAH,IAAM,CAAlB,CAAX,CAFmC,CAGnC;;AACA,QAAGE,QAAQP,MAAX,EAAmB;AACf;AACA;AACAA,eAASE,KAAKM,KAAL,CAAWR,SAAOC,SAAP,GAAiBM,IAA5B,IAAkCN,SAA3C,CAHe,CAIf;;AACA,UAAID,UAAU,IAAX,IAAqBK,IAAID,OAAOE,MAAP,GAAgB,CAA5C,EAAgD;AAC5CN,iBAAS,CAAT;AACAK;AACH,OARc,CASf;;;AACAL,gBAAUI,OAAOC,CAAP,CAAV,CAVe,CAWf;;AACA;AACH;AACJ;;AACD,SAAOL,MAAP;AACH;;AAED,SAASQ,KAAT,CAAeR,MAAf,EAAsC;AAAA,MAAfC,SAAe,uEAAH,CAAG;AAClC,SAAOQ,OAAOT,OAAOU,OAAP,CAAeT,SAAf,CAAP,CAAP;AACH;;AAED,SAASU,OAAT,CAAiBX,MAAjB,EAAyB;AACrB,SAAOA,OAAOY,QAAP,GAAkBC,OAAlB,CAA0B,uBAA1B,EAAmD,GAAnD,CAAP;AACH;;AAED,SAASC,WAAT,CAAqBd,MAArB,EAAuD;AAAA,MAA1Be,MAA0B,uEAAjB,EAAiB;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AACnD,SAAOD,SAASf,MAAT,GAAkBgB,MAAzB;AACH;;AAED,SAASC,YAAT,CAAsBjB,MAAtB,EAAsE;AAAA,MAAxCkB,QAAwC,uEAA7B,CAA6B;AAAA,MAA1BH,MAA0B,uEAAjB,EAAiB;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AAClE,MAAIlB,UAAUE,MAAV,CAAJ,EAAuB;AACnB,WAAOc,YAAYH,QAAQH,MAAMR,MAAN,EAAckB,QAAd,CAAR,CAAZ,EAA8CH,MAA9C,EAAsDC,MAAtD,CAAP;AACH,GAFD,MAEO;AACH,WAAO,IAAP;AACH;AACJ;;AAGD,SAAQjB,OAAR,EAAiBS,KAAjB,EAAwBM,WAAxB,EAAqCH,OAArC,EAA8CM,YAA9C","sourceRoot":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019","sourcesContent":["import isNumeric from './isnumeric';\r\n\r\nfunction abbrNum(number, decPlaces) {\r\n    // 2 decimal places => 100, 3 => 1000, etc\r\n    decPlaces = Math.pow(10, decPlaces);\r\n    // Enumerate number abbreviations\r\n    var abbrev = [ \"k\", \"m\", \"b\", \"t\" ];\r\n    // Go through the array backwards, so we do the largest first\r\n    for (var i=abbrev.length-1; i>=0; i--) {\r\n        // Convert array index to \"1000\", \"1000000\", etc\r\n        var size = Math.pow(10,(i+1)*3);\r\n        // If the number is bigger or equal do the abbreviation\r\n        if(size <= number) {\r\n            // Here, we multiply by decPlaces, round, and then divide by decPlaces.\r\n            // This gives us nice rounding to a particular decimal place.\r\n            number = Math.round(number*decPlaces/size)/decPlaces;\r\n            // Handle special case where we round up to the next abbreviation\r\n            if((number == 1000) && (i < abbrev.length - 1)) {\r\n                number = 1;\r\n                i++;\r\n            }\r\n            // Add the letter for the abbreviation\r\n            number += abbrev[i];\r\n            // We are done... stop\r\n            break;\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\nfunction round(number, decPlaces = 0) {\r\n    return Number(number.toFixed(decPlaces));\r\n}\r\n\r\nfunction commafy(number) {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nfunction numberfixes(number, prefix = '', suffix = '') {\r\n    return prefix + number + suffix;\r\n}\r\n\r\nfunction prettyNumber(number, decimals = 0, prefix = '', suffix = '') {\r\n    if (isNumeric(number)) {\r\n        return numberfixes(commafy(round(number, decimals)), prefix, suffix);\r\n    } else {\r\n        return '--';\r\n    }\r\n}\r\n\r\n\r\nexport {abbrNum, round, numberfixes, commafy, prettyNumber};\r\n"]}]}