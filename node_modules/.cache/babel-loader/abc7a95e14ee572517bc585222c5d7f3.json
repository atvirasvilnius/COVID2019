{"remainingRequest":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\jenksbreaks.js","dependencies":[{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\jenksbreaks.js","mtime":1581925828392},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581926356531},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581926357833},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import jenks from './jenks';\nimport { valsToArray } from './metric_calculations'; // With more than a few years worth of data, jenks calculations can take a long time.\n// So I'm cheating here a bit. I do a jenks calculation with just the last two years if\n// more than 1 year is available. Then I replace the min and max values from the\n// full set so nothing falls between the cracks.\n\nexport default function jenksBreaks(data, years, keys) {\n  var breaks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;\n  var jenksYears = [years[years.length - 1]];\n\n  if (years.length > 1) {\n    jenksYears.push(years[years.length - 2]);\n  }\n\n  var allVals = valsToArray(data, years, keys);\n  var jenksVals = valsToArray(data, [years[years.length - 1]], keys);\n  var jenksArray = jenks(jenksVals, breaks);\n  jenksArray[0] = Math.min.apply(Math, allVals);\n  jenksArray[jenksArray.length - 1] = Math.max.apply(Math, allVals);\n  return jenksArray;\n}",{"version":3,"sources":["src\\js\\jenksbreaks.js"],"names":["jenks","valsToArray","jenksBreaks","data","years","keys","breaks","jenksYears","length","push","allVals","jenksVals","jenksArray","Math","min","apply","max"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,SAAQC,WAAR,QAA0B,uBAA1B,C,CAGA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAoD;AAAA,MAAZC,MAAY,uEAAH,CAAG;AAC/D,MAAIC,aAAa,CAACH,MAAMA,MAAMI,MAAN,GAAe,CAArB,CAAD,CAAjB;;AACA,MAAIJ,MAAMI,MAAN,GAAe,CAAnB,EAAsB;AAClBD,eAAWE,IAAX,CAAgBL,MAAMA,MAAMI,MAAN,GAAe,CAArB,CAAhB;AACH;;AAED,MAAIE,UAAUT,YAAYE,IAAZ,EAAkBC,KAAlB,EAAyBC,IAAzB,CAAd;AACA,MAAIM,YAAYV,YAAYE,IAAZ,EAAkB,CAACC,MAAMA,MAAMI,MAAN,GAAe,CAArB,CAAD,CAAlB,EAA6CH,IAA7C,CAAhB;AAEA,MAAIO,aAAaZ,MAAMW,SAAN,EAAiBL,MAAjB,CAAjB;AAEAM,aAAW,CAAX,IAAgBC,KAAKC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBH,OAArB,CAAhB;AACAE,aAAWA,WAAWJ,MAAX,GAAoB,CAA/B,IAAoCK,KAAKG,GAAL,CAASD,KAAT,CAAeF,IAAf,EAAqBH,OAArB,CAApC;AAEA,SAAOE,UAAP;AACH","sourceRoot":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019","sourcesContent":["import jenks from './jenks';\r\nimport {valsToArray} from './metric_calculations';\r\n\r\n\r\n// With more than a few years worth of data, jenks calculations can take a long time.\r\n// So I'm cheating here a bit. I do a jenks calculation with just the last two years if\r\n// more than 1 year is available. Then I replace the min and max values from the\r\n// full set so nothing falls between the cracks.\r\n\r\nexport default function jenksBreaks(data, years, keys, breaks = 5) {\r\n    let jenksYears = [years[years.length - 1]];\r\n    if (years.length > 1) {\r\n        jenksYears.push(years[years.length - 2]);\r\n    }\r\n\r\n    let allVals = valsToArray(data, years, keys);\r\n    let jenksVals = valsToArray(data, [years[years.length - 1]], keys);\r\n\r\n    let jenksArray = jenks(jenksVals, breaks);\r\n\r\n    jenksArray[0] = Math.min.apply(Math, allVals);\r\n    jenksArray[jenksArray.length - 1] = Math.max.apply(Math, allVals);\r\n\r\n    return jenksArray;\r\n}\r\n"]}]}