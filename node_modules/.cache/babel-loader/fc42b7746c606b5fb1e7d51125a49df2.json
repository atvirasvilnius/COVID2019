{"remainingRequest":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\components\\map.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\components\\map.vue","mtime":1582125739877},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581926356531},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581926357833},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"C:\\\\Users\\\\yz.liu\\\\Desktop\\\\Experiment\\\\COVID2019\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/defineProperty\";\n//\n//\n//\n//\n//\n//\nimport mapboxgl from 'mapbox-gl';\nimport geojsonDataMerge from '../js/geojsondatamerge';\nimport { prettyNumber } from '../js/number_format';\nimport getURLParameter from '../js/geturlparams';\nimport { scaleLinear } from 'd3-scale';\nimport geog from '../../data/geography.geojson.json';\nimport virousgeog from '../../data/config/COVID.geojson.json';\nexport default {\n  name: 'sc-map',\n  watch: {\n    'sharedState.selected': 'selectNeighborhoods',\n    'sharedState.year': 'updateYear',\n    'sharedState.selected': 'styleNeighborhoods',\n    'sharedState.highlight': 'styleNeighborhoods'\n  },\n  methods: {\n    initMap: function initMap() {\n      let _this = this;\n\n      _this.privateState.map = new mapboxgl.Map(_this.privateState.mapOptions);\n      let map = _this.privateState.map; // add nav control\n\n      var nav = new mapboxgl.NavigationControl();\n      map.addControl(nav, 'top-right'); // Pitch control\n\n      class PitchControl {\n        constructor() {\n          _defineProperty(this, \"onPitch\", () => {\n            const pitch = this._map.getPitch();\n\n            const is3DMode = pitch > 5;\n\n            this._container.classList.toggle('active', is3DMode);\n          });\n        }\n\n        onAdd(map) {\n          this._map = map;\n          const container = document.createElement('div');\n          container.className = 'mapboxgl-ctrl mapboxgl-ctrl-group';\n          container.innerHTML = '<button class=\"mapboxgl-ctrl-icon mapboxgl-ctrl-custom-pitch\" type=\"button\"><span>3D</span></button>';\n\n          container.onclick = function () {\n            const pitch = map.getPitch();\n            const zoom = map.getZoom();\n            let nextPitch = 0;\n            if (pitch <= 5) nextPitch = 30;\n\n            if (zoom < 10 && pitch < 5) {\n              map.flyTo({\n                pitch: nextPitch //zoom: 8,\n\n              });\n            } else {\n              map.easeTo({\n                pitch: nextPitch\n              });\n            }\n          };\n\n          map.on('pitchend', this.onPitch);\n          this._container = container;\n          return this._container;\n        }\n\n        onRemove() {\n          this._container.parentNode.removeChild(this._container);\n\n          this._map.off('pitchend', this.onPitch);\n\n          this._map = undefined;\n        }\n\n      }\n\n      ;\n      map.addControl(new PitchControl(), 'top-right'); // disable map rotation using right click + drag and touch\n\n      if (_this.privateState.pitch === false) {\n        //map.dragRotate.disable();\n        map.touchZoomRotate.disableRotation();\n      } // after map initiated, grab geography and intiate/style neighborhoods\n\n\n      map.on('load', function () {\n        _this.privateState.mapLoaded = true;\n        _this.privateState.geoJSON = geog;\n\n        _this.initNeighborhoods();\n\n        _this.styleNeighborhoods();\n\n        _this.initMapEvents();\n\n        if (_this.sharedState.selected.length > 0) {\n          _this.zoomNeighborhoods();\n        }\n      });\n    },\n    initMapEvents: function initMapEvents() {\n      let map = this.privateState.map;\n\n      let _this = this;\n\n      let popup = new mapboxgl.Popup({\n        closeButton: false,\n        closeOnClick: false\n      });\n      map.on('mousemove', 'neighborhoods-fill-extrude', function (e) {\n        map.getCanvas().style.cursor = 'pointer';\n        let feature = e.features[0];\n        popup.setLngLat(map.unproject(e.point)).setHTML(`<div style=\"text-align: center; margin: 0; padding: 0;\">\n\t\t\tUrban Zone: ${feature.properties.SUBZONE_N}</div>\t\t\t\n\t\t\t<div style=\"text-align: center; margin: 0; padding: 0;\"> Plan Area: ${feature.properties.PLN_AREA_N}</div>\n\t\t\t<div style=\"text-align: center; margin: 0; padding: 0;\"> Population: ${feature.properties.TOTAL}</div>`).addTo(map);\n      });\n      map.on('mouseleave', 'neighborhoods-fill-extrude', function () {\n        map.getCanvas().style.cursor = '';\n        popup.remove();\n      });\n      map.on('rotate', function (e) {\n        if (map.getPitch() >= 20) {\n          _this.toggle3D();\n        } else {\n          _this.toggle3D();\n        }\n      });\n    },\n    toggle3D: function toggle3D() {\n      let _this = this;\n\n      let map = _this.privateState.map;\n      let pitched;\n      map.getPitch() >= 20 ? pitched = true : pitched = false;\n\n      if (pitched) {\n        map.setLayoutProperty('neighborhoods', 'visibility', 'none');\n        map.moveLayer('neighborhoods-fill-extrude');\n        map.setPaintProperty('neighborhoods-fill-extrude', 'fill-extrusion-height', _this.getHeight());\n      } else {\n        map.setLayoutProperty('neighborhoods', 'visibility', 'visible');\n        map.moveLayer('neighborhoods-fill-extrude', 'building');\n        map.setPaintProperty('neighborhoods-fill-extrude', 'fill-extrusion-height', 0);\n      }\n    },\n    initNeighborhoods: function initNeighborhoods() {\n      let map = this.privateState.map;\n\n      let _this = this;\n\n      let geoJSON = _this.privateState.geoJSON;\n      map.addSource('neighborhoods', {\n        type: 'geojson',\n        data: geoJSON\n      }); // neighborhood boundaries\n\n      map.addLayer({\n        id: 'neighborhoods',\n        type: 'line',\n        source: 'neighborhoods',\n        layout: {},\n        paint: {}\n      }, 'place_other');\n      map.addLayer({\n        id: 'neighborhoods-fill-extrude',\n        type: 'fill-extrusion',\n        source: 'neighborhoods',\n        //'filter': ['!=', 'choropleth', 'null'],\n        paint: {\n          'fill-extrusion-opacity': 0.7\n        }\n      }, 'building'); // markers layer\n\n      map.addSource('markers', {\n        type: 'geojson',\n        data: virousgeog\n      });\n      map.addLayer({\n        id: 'markers',\n        type: 'circle',\n        source: 'markers',\n\n        /* layout: {\r\n          'icon-image': 'circle-11',\r\n          'icon-size': 1.0,\r\n              } */\n        paint: {\n          'circle-radius': 10,\n          'circle-color': '#ff0000'\n        }\n      });\n      map.setPitch(30);\n      map.setLayoutProperty('neighborhoods', 'visibility', 'none');\n      map.moveLayer('neighborhoods-fill-extrude');\n      map.setPaintProperty('neighborhoods-fill-extrude', 'fill-extrusion-height', _this.getHeight());\n    },\n    selectNeighborhoods: function selectNeighborhoods() {\n      if (this.privateState.mapLoaded === true) {\n        let map = this.privateState.map;\n        let selected = this.sharedState.selected;\n        let filter;\n\n        if (selected.length > 0) {\n          filter = ['in', 'id'];\n\n          for (let i = 0; i < selected.length; i++) {\n            filter.push(selected[i]);\n          }\n        } else {\n          filter = ['in', 'id', '-999999'];\n        } // push selected state\n\n\n        let linkMetric = '';\n\n        if (getURLParameter('m')) {\n          linkMetric = getURLParameter('m');\n        }\n\n        map.setFilter('neighborhoods-line-selected', filter);\n        map.setFilter('neighborhoods-fill-selected', filter);\n      }\n    },\n    styleNeighborhoods: function styleNeighborhoods() {\n      let map = this.privateState.map;\n\n      let _this = this;\n\n      map.setPaintProperty('neighborhoods-fill-extrude', 'fill-extrusion-color', _this.getColors());\n      map.setPaintProperty('neighborhoods', 'line-color', _this.getOutlineColor());\n      map.setPaintProperty('neighborhoods', 'line-width', _this.getOutlineWidth());\n\n      if (_this.privateState.isPitched3D) {\n        map.setPaintProperty('neighborhoods-fill-extrude', 'fill-extrusion-height', _this.getHeight());\n      }\n    },\n    updateChoropleth: function updateChoropleth() {\n      let _this = this;\n\n      if (this.privateState.mapLoaded) {\n        this.styleNeighborhoods();\n      }\n    },\n    updateBreaks: function updateBreaks() {\n      this.privateState.metricId = this.sharedState.metricId;\n      this.updateChoropleth();\n    },\n    updateYear: function updateYear() {\n      if (this.sharedState.metricId === this.privateState.metricId) {\n        this.updateChoropleth();\n      }\n    },\n    geoJSONMerge: function geoJSONMerge() {\n      let _this = this;\n\n      let geoObj = geojsonDataMerge(_this.privateState.geoJSON, _this.sharedState.metric.data.map, _this.sharedState.year);\n      return geoObj;\n    },\n    getFullBounds: function getFullBounds() {\n      let bounds = new mapboxgl.LngLatBounds();\n\n      let _this = this;\n\n      this.privateState.geoJSON.features.forEach(function (feature) {\n        feature.geometry.coordinates.forEach(function (coord) {\n          coord.forEach(function (el) {\n            bounds.extend(el);\n          });\n        });\n      });\n      return bounds;\n    },\n    zoomNeighborhoods: function zoomNeighborhoods() {\n      let bounds = new mapboxgl.LngLatBounds();\n\n      let _this = this;\n\n      this.privateState.geoJSON.features.forEach(function (feature) {\n        if (_this.sharedState.selected.indexOf(feature.properties.id) !== -1) {\n          feature.geometry.coordinates.forEach(function (coord) {\n            coord.forEach(function (el) {\n              bounds.extend(el);\n            });\n          });\n        }\n      });\n      this.privateState.map.fitBounds(bounds, {\n        padding: 100\n      });\n    },\n    getOutlineColor: function getOutlineColor() {\n      const stops = [];\n\n      let _this = this;\n\n      _this.sharedState.selected.forEach(id => {\n        stops.push([id, '#ba00e4']);\n      });\n\n      let outline = {\n        property: 'OBJECTID',\n        default: 'rgba(0,0,0,1)',\n        type: 'categorical',\n        stops: stops\n      };\n\n      if (stops.length > 0) {\n        return outline;\n      } else {\n        return outline.default;\n      }\n    },\n    getOutlineWidth: function getOutlineWidth() {\n      const stops = [];\n\n      let _this = this;\n\n      _this.sharedState.selected.forEach(id => {\n        stops.push([id, 4]);\n      });\n\n      let outlineSize = {\n        property: 'OBJECTID',\n        default: 0.4,\n        type: 'categorical',\n        stops: stops\n      };\n\n      if (stops.length > 0) {\n        return outlineSize;\n      } else {\n        return outlineSize.default;\n      }\n\n      return stops;\n    },\n    getColors: function getColors() {\n      const stops = [];\n\n      let _this = this;\n\n      let feature = _this.privateState.geoJSON.features;\n      let id = 1;\n      let data = feature;\n      let breaks = [3125, 6250, 12500, 25000, 50000, 200000];\n      _this.sharedState.breaks = breaks;\n      let colors = this.sharedState.colors;\n\n      let color = function color(val) {\n        if (val <= breaks[1]) {\n          return colors[0];\n        } else if (val <= breaks[2]) {\n          return colors[1];\n        } else if (val <= breaks[3]) {\n          return colors[2];\n        } else if (val <= breaks[4]) {\n          return colors[3];\n        } else if (val <= breaks[5]) {\n          return colors[4];\n        }\n      };\n\n      Object.keys(data).forEach(id => {\n        const value = _this.sharedState.highlight.length;\n\n        if (value !== 0 && id < value) {\n          stops.push([Number(_this.sharedState.highlight[id]), '#F7E55B']);\n        } else if (value == 0) {\n          stops.push([data[id].properties.OBJECTID, color(data[id].properties.TOTAL)]);\n        }\n      });\n      let fillColor = {\n        property: 'OBJECTID',\n        default: 'rgb(242,243,240)',\n        type: 'categorical',\n        stops: stops\n      };\n      return fillColor;\n    },\n    getHeight: function getHeight() {\n      let _this = this;\n\n      const stops = [];\n      let feature = _this.privateState.geoJSON.features;\n      let id = 1;\n      let data = feature;\n      let hbreaks = [3125, 6250, 12500, 25000, 50000, 200000];\n      _this.sharedState.breaks = hbreaks;\n      let heightAdjust = scaleLinear().domain([hbreaks, hbreaks[hbreaks.length - 1]]).range([0, 200000]);\n      Object.keys(data).forEach(id => {\n        const value = data[id].properties.TOTAL;\n\n        if (value !== null) {\n          stops.push([data[id].properties.OBJECTID, value / 100]);\n        }\n      });\n      let height = {\n        property: 'OBJECTID',\n        default: 0,\n        type: 'categorical',\n        stops: stops\n      };\n      return height;\n    }\n  },\n  mounted: function mounted() {\n    this.initMap();\n  }\n};",{"version":3,"sources":["map.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"\" style=\"position: relative; width: 100%; height: 100%\">\r\n    <div id=\"map\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mapboxgl from 'mapbox-gl';\r\nimport geojsonDataMerge from '../js/geojsondatamerge';\r\nimport {\r\n  prettyNumber\r\n} from '../js/number_format';\r\nimport getURLParameter from '../js/geturlparams';\r\nimport {\r\n  scaleLinear\r\n} from 'd3-scale';\r\nimport geog from '../../data/geography.geojson.json';\r\nimport virousgeog from '../../data/config/COVID.geojson.json';\r\n\r\nexport default {\r\n  name: 'sc-map',\r\n  watch: {\r\n    'sharedState.selected': 'selectNeighborhoods',\r\n    \r\n    'sharedState.year': 'updateYear',\r\n    'sharedState.selected': 'styleNeighborhoods',\r\n    'sharedState.highlight': 'styleNeighborhoods'\r\n  },\r\n  methods: {\r\n    initMap: function () {\r\n      let _this = this;\r\n      _this.privateState.map = new mapboxgl.Map(_this.privateState.mapOptions);\r\n\r\n      let map = _this.privateState.map;\r\n\t\t \r\n      // add nav control\r\n      var nav = new mapboxgl.NavigationControl();\r\n      map.addControl(nav, 'top-right');\r\n\r\n\t  // Pitch control\r\n    class PitchControl {\r\n      onAdd(map) {\r\n        this._map = map;\r\n        const container = document.createElement('div');\r\n        container.className = 'mapboxgl-ctrl mapboxgl-ctrl-group';\r\n        container.innerHTML = '<button class=\"mapboxgl-ctrl-icon mapboxgl-ctrl-custom-pitch\" type=\"button\"><span>3D</span></button>';\r\n        container.onclick = function(){\r\n          const pitch = map.getPitch();\r\n          const zoom = map.getZoom();\r\n          let nextPitch = 0;\r\n          if (pitch <= 5) nextPitch = 30;\r\n          if (zoom < 10 && pitch < 5) {\r\n            map.flyTo({\r\n              pitch: nextPitch,\r\n              //zoom: 8,\r\n            });\r\n          } else {\r\n            map.easeTo({\r\n              pitch: nextPitch\r\n            });\r\n          }\r\n        };\r\n        map.on('pitchend', this.onPitch);\r\n        this._container = container;\r\n        return this._container;\r\n      }\r\n      onPitch = () => {\r\n        const pitch = this._map.getPitch();\r\n        const is3DMode = pitch > 5;\r\n        this._container.classList.toggle('active', is3DMode);\r\n      }\r\n      onRemove() {\r\n        this._container.parentNode.removeChild(this._container);\r\n        this._map.off('pitchend', this.onPitch);\r\n        this._map = undefined;\r\n      }\r\n    };\r\n    map.addControl(new PitchControl(), 'top-right');\r\n\t  \r\n      // disable map rotation using right click + drag and touch\r\n      if (_this.privateState.pitch === false) {\r\n        //map.dragRotate.disable();\r\n        map.touchZoomRotate.disableRotation();\r\n      }\r\n\r\n      // after map initiated, grab geography and intiate/style neighborhoods\r\n      map.on('load', function () {\r\n        _this.privateState.mapLoaded = true;\r\n        _this.privateState.geoJSON = geog;\r\n        _this.initNeighborhoods();\r\n        _this.styleNeighborhoods();\r\n        _this.initMapEvents();\r\n\r\n        if (_this.sharedState.selected.length > 0) {\r\n          _this.zoomNeighborhoods();\r\n        }\r\n      });\r\n\r\n    },\r\n    initMapEvents: function () {\r\n      let map = this.privateState.map;\r\n      let _this = this;\r\n      let popup = new mapboxgl.Popup({\r\n        closeButton: false,\r\n        closeOnClick: false\r\n      });\r\n\r\n      map.on('mousemove', 'neighborhoods-fill-extrude', function (e) {\r\n        map.getCanvas().style.cursor = 'pointer';\r\n        let feature = e.features[0];\r\n        \r\n        popup\r\n          .setLngLat(map.unproject(e.point))\r\n          .setHTML(\r\n            `<div style=\"text-align: center; margin: 0; padding: 0;\">\r\n\t\t\tUrban Zone: ${feature.properties.SUBZONE_N}</div>\t\t\t\r\n\t\t\t<div style=\"text-align: center; margin: 0; padding: 0;\"> Plan Area: ${feature.properties.PLN_AREA_N}</div>\r\n\t\t\t<div style=\"text-align: center; margin: 0; padding: 0;\"> Population: ${feature.properties.TOTAL}</div>`\r\n          )\r\n          .addTo(map);\r\n      });\r\n\r\n      map.on('mouseleave', 'neighborhoods-fill-extrude', function () {\r\n        map.getCanvas().style.cursor = '';\r\n        popup.remove();\r\n      });\r\n\r\n      map.on('rotate', function (e) {\r\n        if (map.getPitch() >= 20) {\r\n          _this.toggle3D();\r\n        } else {\r\n          _this.toggle3D();\r\n        }\r\n      });\r\n    },\r\n    toggle3D: function () {\r\n      let _this = this;\r\n      let map = _this.privateState.map;\r\n      let pitched;\r\n\r\n      map.getPitch() >= 20 ? (pitched = true) : (pitched = false);\r\n\r\n      if (pitched) {\r\n        map.setLayoutProperty('neighborhoods', 'visibility', 'none');\r\n        map.moveLayer('neighborhoods-fill-extrude');\r\n        map.setPaintProperty(\r\n          'neighborhoods-fill-extrude',\r\n          'fill-extrusion-height',\r\n          _this.getHeight()\r\n        );\r\n      } else {\r\n        map.setLayoutProperty('neighborhoods', 'visibility', 'visible');\r\n        map.moveLayer('neighborhoods-fill-extrude', 'building');\r\n        map.setPaintProperty(\r\n          'neighborhoods-fill-extrude',\r\n          'fill-extrusion-height',\r\n          0\r\n        );\r\n      }\r\n    },\r\n    initNeighborhoods: function () {\r\n      let map = this.privateState.map;\r\n      let _this = this;\r\n      let geoJSON = _this.privateState.geoJSON;\r\n\r\n      map.addSource('neighborhoods', {\r\n        type: 'geojson',\r\n        data: geoJSON\r\n      });\r\n\r\n      // neighborhood boundaries\r\n      map.addLayer({\r\n          id: 'neighborhoods',\r\n          type: 'line',\r\n          source: 'neighborhoods',\r\n          layout: {},\r\n          paint: {}\r\n        },\r\n        'place_other'\r\n      );\r\n\r\n      map.addLayer({\r\n          id: 'neighborhoods-fill-extrude',\r\n          type: 'fill-extrusion',\r\n          source: 'neighborhoods',\r\n          //'filter': ['!=', 'choropleth', 'null'],\r\n          paint: {\r\n            'fill-extrusion-opacity': 0.7\r\n          }\r\n        },\r\n        'building'\r\n      );\r\n\t  \r\n      // markers layer\r\n      map.addSource('markers', {\r\n        type: 'geojson',\r\n        data: virousgeog\r\n      });\r\n      map.addLayer({\r\n        id: 'markers',\r\n        type: 'circle',\r\n        source: 'markers',\r\n        /* layout: {\r\n          'icon-image': 'circle-11',\r\n          'icon-size': 1.0,\r\n\t\t  \r\n        } */\r\n\t\tpaint: {\r\n\t\t'circle-radius': 10,\r\n\t\t'circle-color': '#ff0000'\r\n\t\t}\r\n      });\r\n\t  \r\n\r\n\t  \tmap.setPitch(30)\r\n\t\tmap.setLayoutProperty('neighborhoods', 'visibility', 'none');\r\n        map.moveLayer('neighborhoods-fill-extrude');\r\n        map.setPaintProperty(\r\n          'neighborhoods-fill-extrude',\r\n          'fill-extrusion-height',\r\n          _this.getHeight()\r\n        );\r\n    },\r\n    selectNeighborhoods: function () {\r\n      if (this.privateState.mapLoaded === true) {\r\n        let map = this.privateState.map;\r\n        let selected = this.sharedState.selected;\r\n        let filter;\r\n\r\n        if (selected.length > 0) {\r\n          filter = ['in', 'id'];\r\n          for (let i = 0; i < selected.length; i++) {\r\n            filter.push(selected[i]);\r\n          }\r\n        } else {\r\n          filter = ['in', 'id', '-999999'];\r\n        }\r\n\r\n        // push selected state\r\n        let linkMetric = '';\r\n        if (getURLParameter('m')) {\r\n          linkMetric = getURLParameter('m');\r\n        }\r\n\r\n        map.setFilter('neighborhoods-line-selected', filter);\r\n        map.setFilter('neighborhoods-fill-selected', filter);\r\n      }\r\n    },\r\n    styleNeighborhoods: function () {\r\n      let map = this.privateState.map;\r\n      let _this = this;\r\n\r\n      map.setPaintProperty(\r\n        'neighborhoods-fill-extrude',\r\n        'fill-extrusion-color',\r\n        _this.getColors()\r\n      );\r\n      map.setPaintProperty(\r\n        'neighborhoods',\r\n        'line-color',\r\n        _this.getOutlineColor()\r\n      );\r\n      map.setPaintProperty(\r\n        'neighborhoods',\r\n        'line-width',\r\n        _this.getOutlineWidth()\r\n      );\r\n\t  \r\n      if (_this.privateState.isPitched3D) {\r\n        map.setPaintProperty(\r\n          'neighborhoods-fill-extrude',\r\n          'fill-extrusion-height',\r\n          _this.getHeight()\r\n        );\r\n      }\r\n    },\r\n    updateChoropleth: function () {\r\n      let _this = this;\r\n      if (this.privateState.mapLoaded) {\r\n        this.styleNeighborhoods();\r\n      }\r\n    },\r\n    updateBreaks: function () {\r\n      this.privateState.metricId = this.sharedState.metricId;\r\n      this.updateChoropleth();\r\n    },\r\n    updateYear: function () {\r\n      if (this.sharedState.metricId === this.privateState.metricId) {\r\n        this.updateChoropleth();\r\n      }\r\n    },\r\n    geoJSONMerge: function () {\r\n      let _this = this;\r\n      let geoObj = geojsonDataMerge(\r\n        _this.privateState.geoJSON,\r\n        _this.sharedState.metric.data.map,\r\n        _this.sharedState.year\r\n      );\r\n      return geoObj;\r\n    },\r\n    getFullBounds: function () {\r\n      let bounds = new mapboxgl.LngLatBounds();\r\n      let _this = this;\r\n\r\n      this.privateState.geoJSON.features.forEach(function (feature) {\r\n        feature.geometry.coordinates.forEach(function (coord) {\r\n          coord.forEach(function (el) {\r\n            bounds.extend(el);\r\n          });\r\n        });\r\n      });\r\n\r\n      return bounds;\r\n    },\r\n    zoomNeighborhoods: function () {\r\n      let bounds = new mapboxgl.LngLatBounds();\r\n      let _this = this;\r\n\r\n      this.privateState.geoJSON.features.forEach(function (feature) {\r\n        if (_this.sharedState.selected.indexOf(feature.properties.id) !== -1) {\r\n          feature.geometry.coordinates.forEach(function (coord) {\r\n            coord.forEach(function (el) {\r\n              bounds.extend(el);\r\n            });\r\n          });\r\n        }\r\n      });\r\n\r\n      this.privateState.map.fitBounds(bounds, {\r\n        padding: 100\r\n      });\r\n    },\r\n    getOutlineColor: function () {\r\n      const stops = [];\r\n      let _this = this;\r\n\r\n      _this.sharedState.selected.forEach(id => {\r\n        stops.push([id, '#ba00e4']);\r\n      });\r\n\r\n      let outline = {\r\n        property: 'OBJECTID',\r\n        default: 'rgba(0,0,0,1)',\r\n        type: 'categorical',\r\n        stops: stops\r\n      };\r\n\r\n      if (stops.length > 0) {\r\n        return outline;\r\n      } else {\r\n        return outline.default;\r\n      }\r\n    },\r\n    getOutlineWidth: function () {\r\n      const stops = [];\r\n      let _this = this;\r\n\r\n      _this.sharedState.selected.forEach(id => {\r\n        stops.push([id, 4]);\r\n      });\r\n\r\n      let outlineSize = {\r\n        property: 'OBJECTID',\r\n        default: 0.4,\r\n        type: 'categorical',\r\n        stops: stops\r\n      };\r\n\r\n      if (stops.length > 0) {\r\n        return outlineSize;\r\n      } else {\r\n        return outlineSize.default;\r\n      }\r\n\r\n      return stops;\r\n    },\r\n    getColors: function () {\r\n      const stops = [];\r\n      let _this = this;\r\n\t  \r\n\t  let feature = _this.privateState.geoJSON.features;\r\n      let id = 1;  \r\n      let data = feature;\r\n\t  \r\n      let breaks = [3125,6250,12500,25000,50000,200000];\r\n\t  _this.sharedState.breaks = breaks;\r\n      let colors = this.sharedState.colors;\r\n\r\n      let color = function (val) {\r\n        if (val <= breaks[1]) {\r\n          return colors[0];\r\n        } else if (val <= breaks[2]) {\r\n          return colors[1];\r\n        } else if (val <= breaks[3]) {\r\n          return colors[2];\r\n        } else if (val <= breaks[4]) {\r\n          return colors[3];\r\n        } else if (val <= breaks[5]) {\r\n          return colors[4];\r\n        }\r\n      };\r\n\r\n    Object.keys(data).forEach(id => {\r\n             const value = _this.sharedState.highlight.length;\r\n              \r\n\t\t\t if (value !== 0 && id < value) {\t\t\t \r\n\t\t\t    \r\n\t\t\t\tstops.push([Number(_this.sharedState.highlight[id]), '#F7E55B']);\r\n\r\n             } else if (value == 0 ) {\r\n               stops.push([data[id].properties.OBJECTID, color(data[id].properties.TOTAL)]);\r\n             }\r\n\t\t\t \r\n\t\t\t \r\n           });\r\n\t\t   \r\n\t  \r\n      let fillColor = {\r\n        property: 'OBJECTID',\r\n        default: 'rgb(242,243,240)',\r\n        type: 'categorical',\r\n        stops: stops\r\n      };\r\n\r\n      return fillColor;\r\n    },\r\n    getHeight: function () {\r\n      let _this = this;\r\n      const stops = [];\r\n      \r\n\t  let feature = _this.privateState.geoJSON.features;\r\n      let id = 1;  \r\n      let data = feature;\r\n\t  let hbreaks = [3125,6250,12500,25000,50000,200000];\r\n\t  _this.sharedState.breaks = hbreaks;\r\n      let heightAdjust = scaleLinear()\r\n        .domain([\r\n          hbreaks,\r\n          hbreaks[hbreaks.length - 1]\r\n        ])\r\n        .range([0, 200000]);\r\n\r\n      Object.keys(data).forEach(id => {\r\n        const value = data[id].properties.TOTAL;\r\n        if (value !== null) {\r\n          stops.push([data[id].properties.OBJECTID, value/100]);\r\n        }\r\n      });\r\n\t  \r\n      let height = {\r\n        property: 'OBJECTID',\r\n        default: 0,\r\n        type: 'categorical',\r\n        stops: stops\r\n      };\r\n\r\n      return height;\r\n    }\r\n  },\r\n  mounted: function () {\r\n    this.initMap();\r\n  }\r\n};\r\n</script>"],"sourceRoot":"src\\components"}]}