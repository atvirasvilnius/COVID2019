{"remainingRequest":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\jenks.js","dependencies":[{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\jenks.js","mtime":1581925828391},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0IjsKLy8gIyBbSmVua3MgbmF0dXJhbCBicmVha3Mgb3B0aW1pemF0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0plbmtzX25hdHVyYWxfYnJlYWtzX29wdGltaXphdGlvbikKLy8KLy8gSW1wbGVtZW50YXRpb25zOiBbMV0oaHR0cDovL2RhbmllbGpsZXdpcy5vcmcvZmlsZXMvMjAxMC8wNi9KZW5rcy5wZGYpIChweXRob24pLAovLyBbMl0oaHR0cHM6Ly9naXRodWIuY29tL3Z2b292di9kamVvLWplbmtzL2Jsb2IvbWFzdGVyL21haW4uanMpIChidWdneSksCi8vIFszXShodHRwczovL2dpdGh1Yi5jb20vc2ltb2dlby9nZW9zdGF0cy9ibG9iL21hc3Rlci9saWIvZ2Vvc3RhdHMuanMjTDQwNykgKHdvcmtzKQpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBqZW5rcyhkYXRhLCBuX2NsYXNzZXMpIHsKICAvLyBDb21wdXRlIHRoZSBtYXRyaWNlcyByZXF1aXJlZCBmb3IgSmVua3MgYnJlYWtzLiBUaGVzZSBtYXRyaWNlcwogIC8vIGNhbiBiZSB1c2VkIGZvciBhbnkgY2xhc3Npbmcgb2YgZGF0YSB3aXRoIGBjbGFzc2VzIDw9IG5fY2xhc3Nlc2AKICBmdW5jdGlvbiBnZXRNYXRyaWNlcyhkYXRhLCBuX2NsYXNzZXMpIHsKICAgIC8vIGluIHRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiwgdGhlc2UgbWF0cmljZXMgYXJlIHJlZmVycmVkIHRvCiAgICAvLyBhcyBgTENgIGFuZCBgT1BgCiAgICAvLwogICAgLy8gKiBsb3dlcl9jbGFzc19saW1pdHMgKExDKTogb3B0aW1hbCBsb3dlciBjbGFzcyBsaW1pdHMKICAgIC8vICogdmFyaWFuY2VfY29tYmluYXRpb25zIChPUCk6IG9wdGltYWwgdmFyaWFuY2UgY29tYmluYXRpb25zIGZvciBhbGwgY2xhc3NlcwogICAgdmFyIGxvd2VyX2NsYXNzX2xpbWl0cyA9IFtdLAogICAgICAgIHZhcmlhbmNlX2NvbWJpbmF0aW9ucyA9IFtdLAogICAgICAgIC8vIGxvb3AgY291bnRlcnMKICAgIGksCiAgICAgICAgaiwKICAgICAgICAvLyB0aGUgdmFyaWFuY2UsIGFzIGNvbXB1dGVkIGF0IGVhY2ggc3RlcCBpbiB0aGUgY2FsY3VsYXRpb24KICAgIHZhcmlhbmNlID0gMDsgLy8gSW5pdGlhbGl6ZSBhbmQgZmlsbCBlYWNoIG1hdHJpeCB3aXRoIHplcm9lcwoKICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aCArIDE7IGkrKykgewogICAgICB2YXIgdG1wMSA9IFtdLAogICAgICAgICAgdG1wMiA9IFtdOwoKICAgICAgZm9yIChqID0gMDsgaiA8IG5fY2xhc3NlcyArIDE7IGorKykgewogICAgICAgIHRtcDEucHVzaCgwKTsKICAgICAgICB0bXAyLnB1c2goMCk7CiAgICAgIH0KCiAgICAgIGxvd2VyX2NsYXNzX2xpbWl0cy5wdXNoKHRtcDEpOwogICAgICB2YXJpYW5jZV9jb21iaW5hdGlvbnMucHVzaCh0bXAyKTsKICAgIH0KCiAgICBmb3IgKGkgPSAxOyBpIDwgbl9jbGFzc2VzICsgMTsgaSsrKSB7CiAgICAgIGxvd2VyX2NsYXNzX2xpbWl0c1sxXVtpXSA9IDE7CiAgICAgIHZhcmlhbmNlX2NvbWJpbmF0aW9uc1sxXVtpXSA9IDA7IC8vIGluIHRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiwgOTk5OTk5OSBpcyB1c2VkIGJ1dAogICAgICAvLyBzaW5jZSBKYXZhc2NyaXB0IGhhcyBgSW5maW5pdHlgLCB3ZSB1c2UgdGhhdC4KCiAgICAgIGZvciAoaiA9IDI7IGogPCBkYXRhLmxlbmd0aCArIDE7IGorKykgewogICAgICAgIHZhcmlhbmNlX2NvbWJpbmF0aW9uc1tqXVtpXSA9IEluZmluaXR5OwogICAgICB9CiAgICB9CgogICAgZm9yICh2YXIgbCA9IDI7IGwgPCBkYXRhLmxlbmd0aCArIDE7IGwrKykgewogICAgICAvLyBgU1pgIG9yaWdpbmFsbHkuIHRoaXMgaXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIHNlZW4gdGh1cwogICAgICAvLyBmYXIgd2hlbiBjYWxjdWxhdGluZyB2YXJpYW5jZS4KICAgICAgdmFyIHN1bSA9IDAsCiAgICAgICAgICAvLyBgWlNRYCBvcmlnaW5hbGx5LiB0aGUgc3VtIG9mIHNxdWFyZXMgb2YgdmFsdWVzIHNlZW4KICAgICAgLy8gdGh1cyBmYXIKICAgICAgc3VtX3NxdWFyZXMgPSAwLAogICAgICAgICAgLy8gYFdUYCBvcmlnaW5hbGx5LiBUaGlzIGlzIHRoZSBudW1iZXIgb2YKICAgICAgdyA9IDAsCiAgICAgICAgICAvLyBgSVZgIG9yaWdpbmFsbHkKICAgICAgaTQgPSAwOyAvLyBpbiBzZXZlcmFsIGluc3RhbmNlcywgeW91IGNvdWxkIHNheSBgTWF0aC5wb3coeCwgMilgCiAgICAgIC8vIGluc3RlYWQgb2YgYHggKiB4YCwgYnV0IHRoaXMgaXMgc2xvd2VyIGluIHNvbWUgYnJvd3NlcnMKICAgICAgLy8gaW50cm9kdWNlcyBhbiB1bm5lY2Vzc2FyeSBjb25jZXB0LgoKICAgICAgZm9yICh2YXIgbSA9IDE7IG0gPCBsICsgMTsgbSsrKSB7CiAgICAgICAgLy8gYElJSWAgb3JpZ2luYWxseQogICAgICAgIHZhciBsb3dlcl9jbGFzc19saW1pdCA9IGwgLSBtICsgMSwKICAgICAgICAgICAgdmFsID0gZGF0YVtsb3dlcl9jbGFzc19saW1pdCAtIDFdOyAvLyBoZXJlIHdlJ3JlIGVzdGltYXRpbmcgdmFyaWFuY2UgZm9yIGVhY2ggcG90ZW50aWFsIGNsYXNzaW5nCiAgICAgICAgLy8gb2YgdGhlIGRhdGEsIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2YgY2xhc3Nlcy4gYHdgCiAgICAgICAgLy8gaXMgdGhlIG51bWJlciBvZiBkYXRhIHBvaW50cyBjb25zaWRlcmVkIHNvIGZhci4KCiAgICAgICAgdysrOyAvLyBpbmNyZWFzZSB0aGUgY3VycmVudCBzdW0gYW5kIHN1bS1vZi1zcXVhcmVzCgogICAgICAgIHN1bSArPSB2YWw7CiAgICAgICAgc3VtX3NxdWFyZXMgKz0gdmFsICogdmFsOyAvLyB0aGUgdmFyaWFuY2UgYXQgdGhpcyBwb2ludCBpbiB0aGUgc2VxdWVuY2UgaXMgdGhlIGRpZmZlcmVuY2UKICAgICAgICAvLyBiZXR3ZWVuIHRoZSBzdW0gb2Ygc3F1YXJlcyBhbmQgdGhlIHRvdGFsIHggMiwgb3ZlciB0aGUgbnVtYmVyCiAgICAgICAgLy8gb2Ygc2FtcGxlcy4KCiAgICAgICAgdmFyaWFuY2UgPSBzdW1fc3F1YXJlcyAtIHN1bSAqIHN1bSAvIHc7CiAgICAgICAgaTQgPSBsb3dlcl9jbGFzc19saW1pdCAtIDE7CgogICAgICAgIGlmIChpNCAhPT0gMCkgewogICAgICAgICAgZm9yIChqID0gMjsgaiA8IG5fY2xhc3NlcyArIDE7IGorKykgewogICAgICAgICAgICAvLyBpZiBhZGRpbmcgdGhpcyBlbGVtZW50IHRvIGFuIGV4aXN0aW5nIGNsYXNzCiAgICAgICAgICAgIC8vIHdpbGwgaW5jcmVhc2UgaXRzIHZhcmlhbmNlIGJleW9uZCB0aGUgbGltaXQsIGJyZWFrCiAgICAgICAgICAgIC8vIHRoZSBjbGFzcyBhdCB0aGlzIHBvaW50LCBzZXR0aW5nIHRoZSBsb3dlcl9jbGFzc19saW1pdAogICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50LgogICAgICAgICAgICBpZiAodmFyaWFuY2VfY29tYmluYXRpb25zW2xdW2pdID49IHZhcmlhbmNlICsgdmFyaWFuY2VfY29tYmluYXRpb25zW2k0XVtqIC0gMV0pIHsKICAgICAgICAgICAgICBsb3dlcl9jbGFzc19saW1pdHNbbF1bal0gPSBsb3dlcl9jbGFzc19saW1pdDsKICAgICAgICAgICAgICB2YXJpYW5jZV9jb21iaW5hdGlvbnNbbF1bal0gPSB2YXJpYW5jZSArIHZhcmlhbmNlX2NvbWJpbmF0aW9uc1tpNF1baiAtIDFdOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBsb3dlcl9jbGFzc19saW1pdHNbbF1bMV0gPSAxOwogICAgICB2YXJpYW5jZV9jb21iaW5hdGlvbnNbbF1bMV0gPSB2YXJpYW5jZTsKICAgIH0gLy8gcmV0dXJuIHRoZSB0d28gbWF0cmljZXMuIGZvciBqdXN0IHByb3ZpZGluZyBicmVha3MsIG9ubHkKICAgIC8vIGBsb3dlcl9jbGFzc19saW1pdHNgIGlzIG5lZWRlZCwgYnV0IHZhcmlhbmNlcyBjYW4gYmUgdXNlZnVsIHRvCiAgICAvLyBldmFsdWFnZSBnb29kbmVzcyBvZiBmaXQuCgoKICAgIHJldHVybiB7CiAgICAgIGxvd2VyX2NsYXNzX2xpbWl0czogbG93ZXJfY2xhc3NfbGltaXRzLAogICAgICB2YXJpYW5jZV9jb21iaW5hdGlvbnM6IHZhcmlhbmNlX2NvbWJpbmF0aW9ucwogICAgfTsKICB9IC8vIHRoZSBzZWNvbmQgcGFydCBvZiB0aGUgamVua3MgcmVjaXBlOiB0YWtlIHRoZSBjYWxjdWxhdGVkIG1hdHJpY2VzCiAgLy8gYW5kIGRlcml2ZSBhbiBhcnJheSBvZiBuIGJyZWFrcy4KCgogIGZ1bmN0aW9uIGJyZWFrcyhkYXRhLCBsb3dlcl9jbGFzc19saW1pdHMsIG5fY2xhc3NlcykgewogICAgdmFyIGsgPSBkYXRhLmxlbmd0aCAtIDEsCiAgICAgICAga2NsYXNzID0gW10sCiAgICAgICAgY291bnROdW0gPSBuX2NsYXNzZXM7IC8vIHRoZSBjYWxjdWxhdGlvbiBvZiBjbGFzc2VzIHdpbGwgbmV2ZXIgaW5jbHVkZSB0aGUgdXBwZXIgYW5kCiAgICAvLyBsb3dlciBib3VuZHMsIHNvIHdlIG5lZWQgdG8gZXhwbGljaXRseSBzZXQgdGhlbQoKICAgIGtjbGFzc1tuX2NsYXNzZXNdID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdOwogICAga2NsYXNzWzBdID0gZGF0YVswXTsgLy8gdGhlIGxvd2VyX2NsYXNzX2xpbWl0cyBtYXRyaXggaXMgdXNlZCBhcyBpbmRleGVzIGludG8gaXRzZWxmCiAgICAvLyBoZXJlOiB0aGUgYGtgIHZhcmlhYmxlIGlzIHJldXNlZCBpbiBlYWNoIGl0ZXJhdGlvbi4KCiAgICB3aGlsZSAoY291bnROdW0gPiAxKSB7CiAgICAgIGtjbGFzc1tjb3VudE51bSAtIDFdID0gZGF0YVtsb3dlcl9jbGFzc19saW1pdHNba11bY291bnROdW1dIC0gMl07CiAgICAgIGsgPSBsb3dlcl9jbGFzc19saW1pdHNba11bY291bnROdW1dIC0gMTsKICAgICAgY291bnROdW0tLTsKICAgIH0KCiAgICByZXR1cm4ga2NsYXNzOwogIH0KCiAgaWYgKG5fY2xhc3NlcyA+IGRhdGEubGVuZ3RoKSByZXR1cm4gbnVsbDsgLy8gc29ydCBkYXRhIGluIG51bWVyaWNhbCBvcmRlciwgc2luY2UgdGhpcyBpcyBleHBlY3RlZAogIC8vIGJ5IHRoZSBtYXRyaWNlcyBmdW5jdGlvbgoKICBkYXRhID0gZGF0YS5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBhIC0gYjsKICB9KTsgLy8gZ2V0IG91ciBiYXNpYyBtYXRyaWNlcwoKICB2YXIgbWF0cmljZXMgPSBnZXRNYXRyaWNlcyhkYXRhLCBuX2NsYXNzZXMpLAogICAgICAvLyB3ZSBvbmx5IG5lZWQgbG93ZXIgY2xhc3MgbGltaXRzIGhlcmUKICBsb3dlcl9jbGFzc19saW1pdHMgPSBtYXRyaWNlcy5sb3dlcl9jbGFzc19saW1pdHM7IC8vIGV4dHJhY3Qgbl9jbGFzc2VzIG91dCBvZiB0aGUgY29tcHV0ZWQgbWF0cmljZXMKCiAgcmV0dXJuIGJyZWFrcyhkYXRhLCBsb3dlcl9jbGFzc19saW1pdHMsIG5fY2xhc3Nlcyk7Cn0="},{"version":3,"sources":["C:/Users/yz.liu/Desktop/Experiment/COVID2019/src/js/jenks.js"],"names":["jenks","data","n_classes","getMatrices","lower_class_limits","variance_combinations","i","j","variance","length","tmp1","tmp2","push","Infinity","l","sum","sum_squares","w","i4","m","lower_class_limit","val","breaks","k","kclass","countNum","slice","sort","a","b","matrices"],"mappings":"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","sourcesContent":["// # [Jenks natural breaks optimization](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)\r\n//\r\n// Implementations: [1](http://danieljlewis.org/files/2010/06/Jenks.pdf) (python),\r\n// [2](https://github.com/vvoovv/djeo-jenks/blob/master/main.js) (buggy),\r\n// [3](https://github.com/simogeo/geostats/blob/master/lib/geostats.js#L407) (works)\r\nexport default function jenks(data, n_classes) {\r\n\r\n    // Compute the matrices required for Jenks breaks. These matrices\r\n    // can be used for any classing of data with `classes <= n_classes`\r\n    function getMatrices(data, n_classes) {\r\n\r\n        // in the original implementation, these matrices are referred to\r\n        // as `LC` and `OP`\r\n        //\r\n        // * lower_class_limits (LC): optimal lower class limits\r\n        // * variance_combinations (OP): optimal variance combinations for all classes\r\n        var lower_class_limits = [],\r\n            variance_combinations = [],\r\n            // loop counters\r\n            i, j,\r\n            // the variance, as computed at each step in the calculation\r\n            variance = 0;\r\n\r\n        // Initialize and fill each matrix with zeroes\r\n        for (i = 0; i < data.length + 1; i++) {\r\n            var tmp1 = [], tmp2 = [];\r\n            for (j = 0; j < n_classes + 1; j++) {\r\n                tmp1.push(0);\r\n                tmp2.push(0);\r\n            }\r\n            lower_class_limits.push(tmp1);\r\n            variance_combinations.push(tmp2);\r\n        }\r\n\r\n        for (i = 1; i < n_classes + 1; i++) {\r\n            lower_class_limits[1][i] = 1;\r\n            variance_combinations[1][i] = 0;\r\n            // in the original implementation, 9999999 is used but\r\n            // since Javascript has `Infinity`, we use that.\r\n            for (j = 2; j < data.length + 1; j++) {\r\n                variance_combinations[j][i] = Infinity;\r\n            }\r\n        }\r\n\r\n        for (var l = 2; l < data.length + 1; l++) {\r\n\r\n            // `SZ` originally. this is the sum of the values seen thus\r\n            // far when calculating variance.\r\n            var sum = 0,\r\n                // `ZSQ` originally. the sum of squares of values seen\r\n                // thus far\r\n                sum_squares = 0,\r\n                // `WT` originally. This is the number of\r\n                w = 0,\r\n                // `IV` originally\r\n                i4 = 0;\r\n\r\n            // in several instances, you could say `Math.pow(x, 2)`\r\n            // instead of `x * x`, but this is slower in some browsers\r\n            // introduces an unnecessary concept.\r\n            for (var m = 1; m < l + 1; m++) {\r\n\r\n                // `III` originally\r\n                var lower_class_limit = l - m + 1,\r\n                    val = data[lower_class_limit - 1];\r\n\r\n                // here we're estimating variance for each potential classing\r\n                // of the data, for each potential number of classes. `w`\r\n                // is the number of data points considered so far.\r\n                w++;\r\n\r\n                // increase the current sum and sum-of-squares\r\n                sum += val;\r\n                sum_squares += val * val;\r\n\r\n                // the variance at this point in the sequence is the difference\r\n                // between the sum of squares and the total x 2, over the number\r\n                // of samples.\r\n                variance = sum_squares - (sum * sum) / w;\r\n\r\n                i4 = lower_class_limit - 1;\r\n\r\n                if (i4 !== 0) {\r\n                    for (j = 2; j < n_classes + 1; j++) {\r\n                        // if adding this element to an existing class\r\n                        // will increase its variance beyond the limit, break\r\n                        // the class at this point, setting the lower_class_limit\r\n                        // at this point.\r\n                        if (variance_combinations[l][j] >=\r\n                            (variance + variance_combinations[i4][j - 1])) {\r\n                            lower_class_limits[l][j] = lower_class_limit;\r\n                            variance_combinations[l][j] = variance +\r\n                                variance_combinations[i4][j - 1];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            lower_class_limits[l][1] = 1;\r\n            variance_combinations[l][1] = variance;\r\n        }\r\n\r\n        // return the two matrices. for just providing breaks, only\r\n        // `lower_class_limits` is needed, but variances can be useful to\r\n        // evaluage goodness of fit.\r\n        return {\r\n            lower_class_limits: lower_class_limits,\r\n            variance_combinations: variance_combinations\r\n        };\r\n    }\r\n\r\n\r\n\r\n    // the second part of the jenks recipe: take the calculated matrices\r\n    // and derive an array of n breaks.\r\n    function breaks(data, lower_class_limits, n_classes) {\r\n\r\n        var k = data.length - 1,\r\n            kclass = [],\r\n            countNum = n_classes;\r\n\r\n        // the calculation of classes will never include the upper and\r\n        // lower bounds, so we need to explicitly set them\r\n        kclass[n_classes] = data[data.length - 1];\r\n        kclass[0] = data[0];\r\n\r\n        // the lower_class_limits matrix is used as indexes into itself\r\n        // here: the `k` variable is reused in each iteration.\r\n        while (countNum > 1) {\r\n            kclass[countNum - 1] = data[lower_class_limits[k][countNum] - 2];\r\n            k = lower_class_limits[k][countNum] - 1;\r\n            countNum--;\r\n        }\r\n\r\n        return kclass;\r\n    }\r\n\r\n    if (n_classes > data.length) return null;\r\n\r\n    // sort data in numerical order, since this is expected\r\n    // by the matrices function\r\n    data = data.slice().sort(function (a, b) { return a - b; });\r\n\r\n    // get our basic matrices\r\n    var matrices = getMatrices(data, n_classes),\r\n        // we only need lower class limits here\r\n        lower_class_limits = matrices.lower_class_limits;\r\n\r\n    // extract n_classes out of the computed matrices\r\n    return breaks(data, lower_class_limits, n_classes);\r\n\r\n}\r\n"]}]}