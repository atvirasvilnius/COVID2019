{"remainingRequest":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\datasummary.js","dependencies":[{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\src\\js\\datasummary.js","mtime":1581925828387},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581926356531},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581926357833},{"path":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport { calcValue } from './metric_calculations';\nimport { prettyNumber } from './number_format';\nimport selectGroups from '../../data/config/selectgroups.json';\n\nfunction dataSummary(appState) {\n  let summary = {\n    years: [],\n    values: {}\n  };\n  summary.years = appState.metric.years; // Geography Groups\n\n  let selectGroupKeys = Object.keys(selectGroups.Jurisdiction);\n\n  for (let g = 0; g < selectGroupKeys.length; g++) {\n    let groupArray = [];\n    let keys = selectGroups.Jurisdiction[selectGroupKeys[g]];\n\n    for (let i = 0; i < appState.metric.years.length; i++) {\n      let groupVal = calcValue(appState.metric.data, appState.metric.config.type, appState.metric.years[i], keys);\n      groupVal = prettyNumber(groupVal, appState.metric.config.decimals, appState.metric.config.prefix, appState.metric.config.suffix);\n      groupArray.push(groupVal);\n    }\n\n    summary.values[selectGroupKeys[g]] = groupArray;\n  } // County\n\n\n  let areaArray = [];\n  let keys = Object.keys(appState.metric.data.map);\n\n  for (let i = 0; i < appState.metric.years.length; i++) {\n    let areaValue;\n\n    if (appState.metric.config.world_val && appState.metric.config.world_val[`y_${appState.metric.years[i]}`]) {\n      areaValue = appState.metric.config.world_val[`y_${appState.metric.years[i]}`];\n      areaValue = prettyNumber(areaValue, appState.metric.config.decimals, appState.metric.config.prefix, appState.metric.config.suffix);\n    } else {\n      areaValue = calcValue(appState.metric.data, appState.metric.config.type, appState.metric.years[i], keys);\n      areaValue = prettyNumber(areaValue, appState.metric.config.decimals, appState.metric.config.prefix, appState.metric.config.suffix);\n    }\n\n    areaArray.push(areaValue);\n  }\n\n  summary.values.County = areaArray; // selected values\n\n  if (appState.selected.length > 0) {\n    let selectedArray = [];\n\n    for (let i = 0; i < appState.metric.years.length; i++) {\n      let selectedValue = calcValue(appState.metric.data, appState.metric.config.type, appState.metric.years[i], appState.selected);\n      selectedValue = prettyNumber(selectedValue, appState.metric.config.decimals, appState.metric.config.prefix, appState.metric.config.suffix);\n      selectedArray.push(selectedValue);\n    }\n\n    summary.values.Neighborhood = selectedArray;\n  }\n\n  return summary;\n}\n\nexport default dataSummary;",{"version":3,"sources":["src\\js\\datasummary.js"],"names":["calcValue","prettyNumber","selectGroups","dataSummary","appState","summary","years","values","metric","selectGroupKeys","Object","keys","Jurisdiction","g","length","groupArray","i","groupVal","data","config","type","decimals","prefix","suffix","push","areaArray","map","areaValue","world_val","County","selected","selectedArray","selectedValue","Neighborhood"],"mappings":"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","sourceRoot":"C:\\Users\\yz.liu\\Desktop\\Experiment\\COVID2019","sourcesContent":["import {calcValue} from './metric_calculations';\r\nimport {prettyNumber} from './number_format';\r\nimport selectGroups from '../../data/config/selectgroups.json';\r\n\r\nfunction dataSummary(appState) {\r\n  let summary = {\r\n    years: [],\r\n    values: {}\r\n  };\r\n\r\n  summary.years = appState.metric.years;\r\n\r\n  // Geography Groups\r\n  let selectGroupKeys = Object.keys(selectGroups.Jurisdiction);\r\n  for (let g = 0; g < selectGroupKeys.length; g++) {\r\n    let groupArray = [];\r\n    let keys = selectGroups.Jurisdiction[selectGroupKeys[g]];\r\n    for (let i = 0; i < appState.metric.years.length; i++) {\r\n      let groupVal = calcValue(\r\n        appState.metric.data,\r\n        appState.metric.config.type,\r\n        appState.metric.years[i],\r\n        keys\r\n      );\r\n      groupVal = prettyNumber(\r\n        groupVal,\r\n        appState.metric.config.decimals,\r\n        appState.metric.config.prefix,\r\n        appState.metric.config.suffix\r\n      );\r\n      groupArray.push(groupVal);\r\n    }\r\n    summary.values[selectGroupKeys[g]] = groupArray;\r\n  }\r\n\r\n  // County\r\n  let areaArray = [];\r\n  let keys = Object.keys(appState.metric.data.map);\r\n  for (let i = 0; i < appState.metric.years.length; i++) {\r\n    let areaValue;\r\n    if (\r\n      appState.metric.config.world_val &&\r\n      appState.metric.config.world_val[`y_${appState.metric.years[i]}`]\r\n    ) {\r\n      areaValue =\r\n        appState.metric.config.world_val[`y_${appState.metric.years[i]}`];\r\n      areaValue = prettyNumber(\r\n        areaValue,\r\n        appState.metric.config.decimals,\r\n        appState.metric.config.prefix,\r\n        appState.metric.config.suffix\r\n      );\r\n    } else {\r\n      areaValue = calcValue(\r\n        appState.metric.data,\r\n        appState.metric.config.type,\r\n        appState.metric.years[i],\r\n        keys\r\n      );\r\n      areaValue = prettyNumber(\r\n        areaValue,\r\n        appState.metric.config.decimals,\r\n        appState.metric.config.prefix,\r\n        appState.metric.config.suffix\r\n      );\r\n    }\r\n    areaArray.push(areaValue);\r\n  }\r\n  summary.values.County = areaArray;\r\n\r\n  // selected values\r\n  if (appState.selected.length > 0) {\r\n    let selectedArray = [];\r\n    for (let i = 0; i < appState.metric.years.length; i++) {\r\n      let selectedValue = calcValue(\r\n        appState.metric.data,\r\n        appState.metric.config.type,\r\n        appState.metric.years[i],\r\n        appState.selected\r\n      );\r\n      selectedValue = prettyNumber(\r\n        selectedValue,\r\n        appState.metric.config.decimals,\r\n        appState.metric.config.prefix,\r\n        appState.metric.config.suffix\r\n      );\r\n      selectedArray.push(selectedValue);\r\n    }\r\n    summary.values.Neighborhood = selectedArray;\r\n  }\r\n\r\n  return summary;\r\n}\r\n\r\nexport default dataSummary;\r\n"]}]}